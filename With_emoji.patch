Index: .idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"VcsDirectoryMappings\">\n    <mapping directory=\"\" vcs=\"\" />\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/vcs.xml	(revision b58cfdf0a245501220cfda568c583a8cdd2888a5)
+++ .idea/vcs.xml	(revision )
@@ -1,6 +1,6 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
   <component name="VcsDirectoryMappings">
-    <mapping directory="" vcs="" />
+    <mapping directory="$PROJECT_DIR$" vcs="Git" />
   </component>
 </project>
\ No newline at end of file
Index: app/src/main/java/com/creative/chatapp4/ui/activities/ChatActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.creative.chatapp4.ui.activities;\n\nimport android.app.AlertDialog;\nimport android.content.Context;\nimport android.content.Intent;\nimport android.os.Build;\nimport android.os.Bundle;\nimport android.text.TextUtils;\nimport android.util.Log;\nimport android.view.KeyEvent;\nimport android.view.View;\nimport android.view.inputmethod.InputMethodManager;\nimport android.widget.Button;\nimport android.widget.EditText;\nimport android.widget.ImageView;\nimport android.widget.ListView;\nimport android.widget.ProgressBar;\nimport android.widget.RelativeLayout;\nimport android.widget.TextView;\n\nimport com.creative.chatapp4.R;\nimport com.creative.chatapp4.core.Chat;\nimport com.creative.chatapp4.core.ChatService;\nimport com.creative.chatapp4.core.GroupChatImpl;\nimport com.creative.chatapp4.core.PrivateChatImpl;\nimport com.creative.chatapp4.ui.adapters.ChatAdapter;\nimport com.quickblox.chat.QBChatService;\nimport com.quickblox.chat.model.QBChatMessage;\nimport com.quickblox.chat.model.QBDialog;\nimport com.quickblox.chat.model.QBDialogType;\nimport com.quickblox.core.QBEntityCallback;\nimport com.quickblox.core.exception.QBResponseException;\nimport com.quickblox.core.request.QBRequestGetBuilder;\n\nimport org.jivesoftware.smack.ConnectionListener;\nimport org.jivesoftware.smack.SmackException;\nimport org.jivesoftware.smack.XMPPConnection;\nimport org.jivesoftware.smack.XMPPException;\n\nimport java.util.ArrayList;\nimport java.util.Date;\n\nimport vc908.stickerfactory.StickersManager;\nimport vc908.stickerfactory.ui.OnEmojiBackspaceClickListener;\nimport vc908.stickerfactory.ui.OnStickerSelectedListener;\nimport vc908.stickerfactory.ui.fragment.StickersFragment;\nimport vc908.stickerfactory.ui.view.KeyboardHandleRelativeLayout;\n\npublic class ChatActivity extends BaseActivity implements KeyboardHandleRelativeLayout.KeyboardSizeChangeListener {\n\n    private static final String TAG = ChatActivity.class.getSimpleName();\n\n    public static final String EXTRA_DIALOG = \"dialog\";\n    private final String PROPERTY_SAVE_TO_HISTORY = \"save_to_history\";\n\n    private EditText messageEditText;\n    private ListView messagesContainer;\n    private Button sendButton;\n    private ProgressBar progressBar;\n    private ChatAdapter adapter;\n\n    private Chat chat;\n    private QBDialog dialog;\n    private KeyboardHandleRelativeLayout keyboardHandleLayout;\n    private View stickersFrame;\n    private boolean isStickersFrameVisible;\n    private ImageView stickerButton;\n    private RelativeLayout container;\n\n    public static void start(Context context, Bundle bundle) {\n        Intent intent = new Intent(context, ChatActivity.class);\n        intent.putExtras(bundle);\n        context.startActivity(intent);\n    }\n\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_chat);\n\n        initViews();\n\n        // Init chat if the session is active\n        //\n        if (isSessionActive()) {\n            initChat();\n        }\n\n        ChatService.getInstance().addConnectionListener(chatConnectionListener);\n    }\n\n    @Override\n    protected void onDestroy() {\n        super.onDestroy();\n\n        ChatService.getInstance().removeConnectionListener(chatConnectionListener);\n    }\n\n    @Override\n    public void onBackPressed() {\n        if (isStickersFrameVisible) {\n            setStickersFrameVisible(false);\n            stickerButton.setImageResource(R.drawable.ic_action_insert_emoticon);\n        } else {\n            try {\n                chat.release();\n            } catch (XMPPException e) {\n                Log.e(TAG, \"failed to release chat\", e);\n            }\n            super.onBackPressed();\n\n            Intent i = new Intent(ChatActivity.this, DialogsActivity.class);\n            startActivity(i);\n            finish();\n        }\n    }\n\n    private void initViews() {\n        messagesContainer = (ListView) findViewById(R.id.messagesContainer);\n        messageEditText = (EditText) findViewById(R.id.messageEdit);\n        progressBar = (ProgressBar) findViewById(R.id.progressBar);\n        TextView companionLabel = (TextView) findViewById(R.id.companionLabel);\n\n        // Setup opponents info\n        //\n        Intent intent = getIntent();\n        dialog = (QBDialog) intent.getSerializableExtra(EXTRA_DIALOG);\n        container = (RelativeLayout) findViewById(R.id.container);\n        if (dialog.getType() == QBDialogType.GROUP) {\n            TextView meLabel = (TextView) findViewById(R.id.meLabel);\n            container.removeView(meLabel);\n            container.removeView(companionLabel);\n        } else if (dialog.getType() == QBDialogType.PRIVATE) {\n            Integer opponentID = ChatService.getInstance().getOpponentIDForPrivateDialog(dialog);\n            companionLabel.setText(ChatService.getInstance().getDialogsUsers().get(opponentID).getLogin());\n        }\n\n        // Send button\n        //\n        sendButton = (Button) findViewById(R.id.chatSendButton);\n        sendButton.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                String messageText = messageEditText.getText().toString();\n                if (TextUtils.isEmpty(messageText)) {\n                    return;\n                }\n                sendChatMessage(messageText);\n\n            }\n        });\n\n        // Stickers\n        keyboardHandleLayout = (KeyboardHandleRelativeLayout) findViewById(R.id.sizeNotifierLayout);\n        keyboardHandleLayout.listener = this;\n        stickersFrame = findViewById(R.id.frame);\n        stickerButton = (ImageView) findViewById(R.id.stickers_button);\n\n        stickerButton.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                if (isStickersFrameVisible) {\n                    showKeyboard();\n                    stickerButton.setImageResource(R.drawable.ic_action_insert_emoticon);\n                } else {\n                    if (keyboardHandleLayout.isKeyboardVisible()) {\n                        keyboardHandleLayout.hideKeyboard(ChatActivity.this, new KeyboardHandleRelativeLayout.OnKeyboardHideCallback() {\n                            @Override\n                            public void onKeyboardHide() {\n                                stickerButton.setImageResource(R.drawable.ic_action_keyboard);\n                                setStickersFrameVisible(true);\n                            }\n                        });\n                    } else {\n                        stickerButton.setImageResource(R.drawable.ic_action_keyboard);\n                        setStickersFrameVisible(true);\n                    }\n                }\n            }\n        });\n\n        updateStickersFrameParams();\n        StickersFragment stickersFragment = (StickersFragment) getSupportFragmentManager().findFragmentById(R.id.frame);\n        if (stickersFragment == null) {\n            stickersFragment = new StickersFragment.Builder()\n                    .setStickerPlaceholderColorFilterRes(android.R.color.darker_gray)\n                    .build();\n            getSupportFragmentManager().beginTransaction().replace(R.id.frame, stickersFragment).commit();\n        }\n        stickersFragment.setOnStickerSelectedListener(stickerSelectedListener);\n        stickersFragment.setOnEmojiBackspaceClickListener(new OnEmojiBackspaceClickListener() {\n            @Override\n            public void onEmojiBackspaceClicked() {\n                KeyEvent event = new KeyEvent(\n                        0, 0, 0, KeyEvent.KEYCODE_DEL, 0, 0, 0, 0, KeyEvent.KEYCODE_ENDCALL);\n                messageEditText.dispatchKeyEvent(event);\n            }\n        });\n        setStickersFrameVisible(isStickersFrameVisible);\n    }\n\n    private void showKeyboard() {\n        ((InputMethodManager) messageEditText.getContext().getSystemService(Context.INPUT_METHOD_SERVICE)).showSoftInput(messageEditText, InputMethodManager.SHOW_IMPLICIT);\n    }\n\n    private void sendChatMessage(String messageText) {\n        QBChatMessage chatMessage = new QBChatMessage();\n        chatMessage.setBody(messageText);\n        chatMessage.setProperty(PROPERTY_SAVE_TO_HISTORY, \"1\");\n        chatMessage.setDateSent(new Date().getTime() / 1000);\n\n        try {\n            chat.sendMessage(chatMessage);\n        } catch (XMPPException e) {\n            Log.e(TAG, \"failed to send a message\", e);\n        } catch (SmackException sme) {\n            Log.e(TAG, \"failed to send a message\", sme);\n        }\n\n        messageEditText.setText(\"\");\n\n        if (dialog.getType() == QBDialogType.PRIVATE) {\n            showMessage(chatMessage);\n        }\n    }\n\n    private OnStickerSelectedListener stickerSelectedListener = new OnStickerSelectedListener() {\n        @Override\n        public void onStickerSelected(String code) {\n            if (StickersManager.isSticker(code)) {\n                sendChatMessage(code);\n//                setStickersFrameVisible(false);\n            } else {\n                // append emoji to edit\n                messageEditText.append(code);\n            }\n        }\n    };\n\n    @Override\n    public void onKeyboardVisibilityChanged(boolean isVisible) {\n        if (isVisible) {\n            setStickersFrameVisible(false);\n            stickerButton.setImageResource(R.drawable.ic_action_insert_emoticon);\n        } else {\n            if (isStickersFrameVisible) {\n                stickerButton.setImageResource(R.drawable.ic_action_keyboard);\n            } else {\n                stickerButton.setImageResource(R.drawable.ic_action_insert_emoticon);\n            }\n        }\n    }\n\n    private void setStickersFrameVisible(final boolean isVisible) {\n        stickersFrame.setVisibility(isVisible ? View.VISIBLE : View.GONE);\n        isStickersFrameVisible = isVisible;\n        if (stickersFrame.getHeight() != vc908.stickerfactory.utils.KeyboardUtils.getKeyboardHeight()) {\n            updateStickersFrameParams();\n        }\n        final int padding = isVisible ? vc908.stickerfactory.utils.KeyboardUtils.getKeyboardHeight() : 0;\n        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.KITKAT) {\n            keyboardHandleLayout.post(new Runnable() {\n                @Override\n                public void run() {\n                    setContentBottomPadding(padding);\n                    scrollDown();\n                }\n            });\n        } else {\n            setContentBottomPadding(padding);\n        }\n        scrollDown();\n    }\n\n    private void updateStickersFrameParams() {\n        stickersFrame.getLayoutParams().height = vc908.stickerfactory.utils.KeyboardUtils.getKeyboardHeight();\n    }\n\n    public void setContentBottomPadding(int padding) {\n        container.setPadding(0, 0, 0, padding);\n    }\n\n    private void initChat() {\n\n        if (dialog.getType() == QBDialogType.GROUP) {\n            chat = new GroupChatImpl(this);\n\n            // Join group chat\n            //\n            progressBar.setVisibility(View.VISIBLE);\n            //\n            joinGroupChat();\n\n        } else if (dialog.getType() == QBDialogType.PRIVATE) {\n            Integer opponentID = ChatService.getInstance().getOpponentIDForPrivateDialog(dialog);\n\n            chat = new PrivateChatImpl(this, opponentID);\n\n            // Load CHat history\n            //\n            loadChatHistory();\n        }\n    }\n\n    private void joinGroupChat(){\n        ((GroupChatImpl) chat).joinGroupChat(dialog, new QBEntityCallback<Void>() {\n            @Override\n            public void onSuccess(Void result, Bundle bundle) {\n\n                // Load Chat history\n                //\n                loadChatHistory();\n            }\n\n            @Override\n            public void onError(QBResponseException list) {\n                AlertDialog.Builder dialog = new AlertDialog.Builder(ChatActivity.this);\n                dialog.setMessage(\"error when join group chat: \" + list.toString()).create().show();\n            }\n        });\n    }\n\n    private void loadChatHistory() {\n        QBRequestGetBuilder customObjectRequestBuilder = new QBRequestGetBuilder();\n        customObjectRequestBuilder.setLimit(100);\n        customObjectRequestBuilder.sortDesc(\"date_sent\");\n\n        QBChatService.getDialogMessages(dialog, customObjectRequestBuilder, new QBEntityCallback<ArrayList<QBChatMessage>>() {\n            @Override\n            public void onSuccess(ArrayList<QBChatMessage> messages, Bundle args) {\n\n                adapter = new ChatAdapter(ChatActivity.this, new ArrayList<QBChatMessage>());\n                messagesContainer.setAdapter(adapter);\n\n                for (int i = messages.size() - 1; i >= 0; --i) {\n                    QBChatMessage msg = messages.get(i);\n                    showMessage(msg);\n                }\n\n                progressBar.setVisibility(View.GONE);\n            }\n\n            @Override\n            public void onError(QBResponseException errors) {\n                if (!ChatActivity.this.isFinishing()) {\n                    AlertDialog.Builder dialog = new AlertDialog.Builder(ChatActivity.this);\n                    dialog.setMessage(\"load chat history errors: \" + errors).create().show();\n                }\n            }\n        });\n    }\n\n    public void showMessage(QBChatMessage message) {\n        adapter.add(message);\n\n        runOnUiThread(new Runnable() {\n            @Override\n            public void run() {\n                adapter.notifyDataSetChanged();\n                scrollDown();\n            }\n        });\n    }\n\n    private void scrollDown() {\n        messagesContainer.setSelection(messagesContainer.getCount() - 1);\n    }\n\n\n    ConnectionListener chatConnectionListener = new ConnectionListener() {\n        @Override\n        public void connected(XMPPConnection connection) {\n            Log.i(TAG, \"connected\");\n        }\n\n        @Override\n        public void authenticated(XMPPConnection connection, boolean authenticated) {\n            Log.i(TAG, \"authenticated\");\n        }\n\n        @Override\n        public void connectionClosed() {\n            Log.i(TAG, \"connectionClosed\");\n        }\n\n        @Override\n        public void connectionClosedOnError(final Exception e) {\n            Log.i(TAG, \"connectionClosedOnError: \" + e.getLocalizedMessage());\n\n            // leave active room\n            //\n            if (dialog.getType() == QBDialogType.GROUP) {\n                ChatActivity.this.runOnUiThread(new Runnable() {\n                    @Override\n                    public void run() {\n                        ((GroupChatImpl) chat).leave();\n                    }\n                });\n            }\n        }\n\n        @Override\n        public void reconnectingIn(final int seconds) {\n            if (seconds % 5 == 0) {\n                Log.i(TAG, \"reconnectingIn: \" + seconds);\n            }\n        }\n\n        @Override\n        public void reconnectionSuccessful() {\n            Log.i(TAG, \"reconnectionSuccessful\");\n\n            // Join active room\n            //\n            if (dialog.getType() == QBDialogType.GROUP) {\n                ChatActivity.this.runOnUiThread(new Runnable() {\n                    @Override\n                    public void run() {\n                        joinGroupChat();\n                    }\n                });\n            }\n        }\n\n        @Override\n        public void reconnectionFailed(final Exception error) {\n            Log.i(TAG, \"reconnectionFailed: \" + error.getLocalizedMessage());\n        }\n    };\n\n\n    //\n    // ApplicationSessionStateCallback\n    //\n\n    @Override\n    public void onStartSessionRecreation() {\n\n    }\n\n    @Override\n    public void onFinishSessionRecreation(final boolean success) {\n        runOnUiThread(new Runnable() {\n            @Override\n            public void run() {\n                if (success) {\n                    initChat();\n                }\n            }\n        });\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>windows-1252
===================================================================
--- app/src/main/java/com/creative/chatapp4/ui/activities/ChatActivity.java	(revision b58cfdf0a245501220cfda568c583a8cdd2888a5)
+++ app/src/main/java/com/creative/chatapp4/ui/activities/ChatActivity.java	(revision )
@@ -7,7 +7,6 @@
 import android.os.Bundle;
 import android.text.TextUtils;
 import android.util.Log;
-import android.view.KeyEvent;
 import android.view.View;
 import android.view.inputmethod.InputMethodManager;
 import android.widget.Button;
@@ -31,6 +30,9 @@
 import com.quickblox.core.QBEntityCallback;
 import com.quickblox.core.exception.QBResponseException;
 import com.quickblox.core.request.QBRequestGetBuilder;
+import com.rockerhieu.emojicon.EmojiconGridFragment;
+import com.rockerhieu.emojicon.EmojiconsFragment;
+import com.rockerhieu.emojicon.emoji.Emojicon;
 
 import org.jivesoftware.smack.ConnectionListener;
 import org.jivesoftware.smack.SmackException;
@@ -40,13 +42,8 @@
 import java.util.ArrayList;
 import java.util.Date;
 
-import vc908.stickerfactory.StickersManager;
-import vc908.stickerfactory.ui.OnEmojiBackspaceClickListener;
-import vc908.stickerfactory.ui.OnStickerSelectedListener;
-import vc908.stickerfactory.ui.fragment.StickersFragment;
-import vc908.stickerfactory.ui.view.KeyboardHandleRelativeLayout;
 
-public class ChatActivity extends BaseActivity implements KeyboardHandleRelativeLayout.KeyboardSizeChangeListener {
+public class ChatActivity extends BaseActivity implements EmojiconGridFragment.OnEmojiconClickedListener, EmojiconsFragment.OnEmojiconBackspaceClickedListener {
 
     private static final String TAG = ChatActivity.class.getSimpleName();
 
@@ -61,7 +58,6 @@
 
     private Chat chat;
     private QBDialog dialog;
-    private KeyboardHandleRelativeLayout keyboardHandleLayout;
     private View stickersFrame;
     private boolean isStickersFrameVisible;
     private ImageView stickerButton;
@@ -79,13 +75,13 @@
         setContentView(R.layout.activity_chat);
 
         initViews();
-
+        setEmojiconFragment(false);
         // Init chat if the session is active
         //
         if (isSessionActive()) {
             initChat();
         }
-
+        stickersFrame.setVisibility(View.INVISIBLE);
         ChatService.getInstance().addConnectionListener(chatConnectionListener);
     }
 
@@ -151,54 +147,47 @@
         });
 
         // Stickers
-        keyboardHandleLayout = (KeyboardHandleRelativeLayout) findViewById(R.id.sizeNotifierLayout);
-        keyboardHandleLayout.listener = this;
+
         stickersFrame = findViewById(R.id.frame);
         stickerButton = (ImageView) findViewById(R.id.stickers_button);
 
         stickerButton.setOnClickListener(new View.OnClickListener() {
             @Override
             public void onClick(View v) {
+
                 if (isStickersFrameVisible) {
                     showKeyboard();
                     stickerButton.setImageResource(R.drawable.ic_action_insert_emoticon);
                 } else {
-                    if (keyboardHandleLayout.isKeyboardVisible()) {
-                        keyboardHandleLayout.hideKeyboard(ChatActivity.this, new KeyboardHandleRelativeLayout.OnKeyboardHideCallback() {
-                            @Override
-                            public void onKeyboardHide() {
+                    stickersFrame.setVisibility(View.VISIBLE);
-                                stickerButton.setImageResource(R.drawable.ic_action_keyboard);
+                    stickerButton.setImageResource(R.drawable.ic_action_keyboard);
-                                setStickersFrameVisible(true);
+//                    setStickersFrameVisible(true);
+                    container.setPadding(0, 0, 0, 500);
-                            }
+                }
-                        });
-                    } else {
-                        stickerButton.setImageResource(R.drawable.ic_action_keyboard);
-                        setStickersFrameVisible(true);
-                    }
+            }
-                }
-            }
         });
 
-        updateStickersFrameParams();
-        StickersFragment stickersFragment = (StickersFragment) getSupportFragmentManager().findFragmentById(R.id.frame);
-        if (stickersFragment == null) {
-            stickersFragment = new StickersFragment.Builder()
-                    .setStickerPlaceholderColorFilterRes(android.R.color.darker_gray)
-                    .build();
-            getSupportFragmentManager().beginTransaction().replace(R.id.frame, stickersFragment).commit();
+
+//        setStickersFrameVisible(false);
-        }
+    }
-        stickersFragment.setOnStickerSelectedListener(stickerSelectedListener);
-        stickersFragment.setOnEmojiBackspaceClickListener(new OnEmojiBackspaceClickListener() {
+
-            @Override
+    @Override
-            public void onEmojiBackspaceClicked() {
-                KeyEvent event = new KeyEvent(
-                        0, 0, 0, KeyEvent.KEYCODE_DEL, 0, 0, 0, 0, KeyEvent.KEYCODE_ENDCALL);
-                messageEditText.dispatchKeyEvent(event);
+    public void onEmojiconClicked(Emojicon emojicon) {
+        EmojiconsFragment.input(messageEditText, emojicon);
-            }
+    }
-        });
-        setStickersFrameVisible(isStickersFrameVisible);
+
+    @Override
+    public void onEmojiconBackspaceClicked(View v) {
+        EmojiconsFragment.backspace(messageEditText);
     }
 
+    private void setEmojiconFragment(boolean useSystemDefault) {
+        getSupportFragmentManager()
+                .beginTransaction()
+                .replace(R.id.frame, EmojiconsFragment.newInstance(useSystemDefault))
+                .commit();
+    }
+
     private void showKeyboard() {
         ((InputMethodManager) messageEditText.getContext().getSystemService(Context.INPUT_METHOD_SERVICE)).showSoftInput(messageEditText, InputMethodManager.SHOW_IMPLICIT);
     }
@@ -224,48 +213,22 @@
         }
     }
 
-    private OnStickerSelectedListener stickerSelectedListener = new OnStickerSelectedListener() {
-        @Override
-        public void onStickerSelected(String code) {
-            if (StickersManager.isSticker(code)) {
-                sendChatMessage(code);
-//                setStickersFrameVisible(false);
-            } else {
-                // append emoji to edit
-                messageEditText.append(code);
-            }
-        }
-    };
 
-    @Override
-    public void onKeyboardVisibilityChanged(boolean isVisible) {
-        if (isVisible) {
-            setStickersFrameVisible(false);
-            stickerButton.setImageResource(R.drawable.ic_action_insert_emoticon);
-        } else {
-            if (isStickersFrameVisible) {
-                stickerButton.setImageResource(R.drawable.ic_action_keyboard);
-            } else {
-                stickerButton.setImageResource(R.drawable.ic_action_insert_emoticon);
-            }
-        }
-    }
-
     private void setStickersFrameVisible(final boolean isVisible) {
         stickersFrame.setVisibility(isVisible ? View.VISIBLE : View.GONE);
         isStickersFrameVisible = isVisible;
-        if (stickersFrame.getHeight() != vc908.stickerfactory.utils.KeyboardUtils.getKeyboardHeight()) {
+        if (stickersFrame.getHeight() != 240) {
             updateStickersFrameParams();
         }
-        final int padding = isVisible ? vc908.stickerfactory.utils.KeyboardUtils.getKeyboardHeight() : 0;
+        final int padding = isVisible ? 240 : 0;
         if (Build.VERSION.SDK_INT < Build.VERSION_CODES.KITKAT) {
-            keyboardHandleLayout.post(new Runnable() {
+            new Runnable() {
                 @Override
                 public void run() {
                     setContentBottomPadding(padding);
                     scrollDown();
                 }
-            });
+            };
         } else {
             setContentBottomPadding(padding);
         }
@@ -273,7 +236,7 @@
     }
 
     private void updateStickersFrameParams() {
-        stickersFrame.getLayoutParams().height = vc908.stickerfactory.utils.KeyboardUtils.getKeyboardHeight();
+        stickersFrame.getLayoutParams().height = 240;
     }
 
     public void setContentBottomPadding(int padding) {
@@ -302,7 +265,7 @@
         }
     }
 
-    private void joinGroupChat(){
+    private void joinGroupChat() {
         ((GroupChatImpl) chat).joinGroupChat(dialog, new QBEntityCallback<Void>() {
             @Override
             public void onSuccess(Void result, Bundle bundle) {
Index: app/src/main/res/layout/activity_chat.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n              android:layout_width=\"match_parent\"\n              android:layout_height=\"match_parent\"\n              android:orientation=\"vertical\">\n\n    <vc908.stickerfactory.ui.view.KeyboardHandleRelativeLayout\n        android:id=\"@+id/sizeNotifierLayout\"\n        xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\">\n\n        <RelativeLayout\n            android:id=\"@+id/container\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"match_parent\"\n            android:orientation=\"vertical\"\n            android:padding=\"20dp\">\n\n            <ImageView\n                android:id=\"@+id/stickers_button\"\n                android:layout_width=\"wrap_content\"\n                android:layout_height=\"wrap_content\"\n                android:layout_alignParentBottom=\"true\"\n                android:src=\"@drawable/ic_action_insert_emoticon\"\n                android:padding=\"8dp\"/>\n\n            <EditText\n                android:id=\"@+id/messageEdit\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"wrap_content\"\n                android:layout_alignParentBottom=\"true\"\n                android:layout_toLeftOf=\"@+id/chatSendButton\"\n                android:layout_toRightOf=\"@id/stickers_button\"\n                android:autoText=\"true\"\n                android:hint=\"message text\"/>\n\n            <Button\n                android:id=\"@+id/chatSendButton\"\n                android:layout_width=\"wrap_content\"\n                android:layout_height=\"wrap_content\"\n                android:layout_alignParentBottom=\"true\"\n                android:layout_alignParentRight=\"true\"\n                android:text=\"Send\"/>\n\n            <ListView\n                android:id=\"@+id/messagesContainer\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"match_parent\"\n                android:layout_above=\"@+id/messageEdit\"\n                android:layout_alignParentLeft=\"false\"\n                android:layout_alignParentTop=\"false\"\n                android:layout_below=\"@+id/meLabel\"\n                android:layout_marginBottom=\"20dp\"\n                android:layout_marginTop=\"10dp\"\n                android:divider=\"@null\"\n                android:listSelector=\"@android:color/transparent\"\n                android:transcriptMode=\"alwaysScroll\"/>\n\n            <TextView\n                android:id=\"@+id/meLabel\"\n                android:layout_width=\"wrap_content\"\n                android:layout_height=\"wrap_content\"\n                android:layout_gravity=\"left|center_vertical\"\n                android:singleLine=\"false\"\n                android:text=\"Me\"\n                android:textSize=\"20dp\"/>\n\n            <TextView\n                android:id=\"@+id/companionLabel\"\n                android:layout_width=\"wrap_content\"\n                android:layout_height=\"wrap_content\"\n                android:layout_alignParentRight=\"true\"\n                android:text=\"Friend\"\n                android:textSize=\"20dp\"/>\n\n            <ProgressBar\n                android:id=\"@+id/progressBar\"\n                style=\"?android:attr/progressBarStyleLarge\"\n                android:layout_width=\"wrap_content\"\n                android:layout_height=\"wrap_content\"\n                android:layout_centerHorizontal=\"true\"\n                android:layout_centerVertical=\"true\"/>\n\n        </RelativeLayout>\n\n        <FrameLayout\n            android:id=\"@+id/frame\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"240dp\"\n            android:layout_alignParentBottom=\"true\"/>\n    </vc908.stickerfactory.ui.view.KeyboardHandleRelativeLayout>\n</LinearLayout>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/activity_chat.xml	(revision b58cfdf0a245501220cfda568c583a8cdd2888a5)
+++ app/src/main/res/layout/activity_chat.xml	(revision )
@@ -1,93 +1,90 @@
 <?xml version="1.0" encoding="utf-8"?>
 <LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:emojicon="http://schemas.android.com/apk/res-auto"
-              android:layout_width="match_parent"
-              android:layout_height="match_parent"
-              android:orientation="vertical">
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:orientation="vertical">
 
-    <vc908.stickerfactory.ui.view.KeyboardHandleRelativeLayout
-        android:id="@+id/sizeNotifierLayout"
-        xmlns:android="http://schemas.android.com/apk/res/android"
-        android:layout_width="match_parent"
-        android:layout_height="match_parent">
 
-        <RelativeLayout
-            android:id="@+id/container"
-            android:layout_width="match_parent"
-            android:layout_height="match_parent"
-            android:orientation="vertical"
-            android:padding="20dp">
+    <RelativeLayout
+        android:id="@+id/container"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:orientation="vertical"
+        android:padding="20dp">
 
-            <ImageView
-                android:id="@+id/stickers_button"
-                android:layout_width="wrap_content"
-                android:layout_height="wrap_content"
-                android:layout_alignParentBottom="true"
+        <ImageView
+            android:id="@+id/stickers_button"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_alignParentBottom="true"
-                android:src="@drawable/ic_action_insert_emoticon"
-                android:padding="8dp"/>
+            android:padding="8dp"
+            android:src="@drawable/ic_action_insert_emoticon" />
 
-            <EditText
+        <com.rockerhieu.emojicon.EmojiconEditText
-                android:id="@+id/messageEdit"
-                android:layout_width="match_parent"
-                android:layout_height="wrap_content"
-                android:layout_alignParentBottom="true"
-                android:layout_toLeftOf="@+id/chatSendButton"
-                android:layout_toRightOf="@id/stickers_button"
-                android:autoText="true"
+            android:id="@+id/messageEdit"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:layout_alignParentBottom="true"
+            android:layout_toLeftOf="@+id/chatSendButton"
+            android:layout_toRightOf="@id/stickers_button"
+            android:autoText="true"
-                android:hint="message text"/>
+            android:hint="message text"
+            emojicon:emojiconSize="28sp" />
 
-            <Button
-                android:id="@+id/chatSendButton"
-                android:layout_width="wrap_content"
-                android:layout_height="wrap_content"
-                android:layout_alignParentBottom="true"
-                android:layout_alignParentRight="true"
+        <Button
+            android:id="@+id/chatSendButton"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_alignParentBottom="true"
+            android:layout_alignParentRight="true"
-                android:text="Send"/>
+            android:text="Send" />
 
-            <ListView
-                android:id="@+id/messagesContainer"
-                android:layout_width="match_parent"
-                android:layout_height="match_parent"
-                android:layout_above="@+id/messageEdit"
-                android:layout_alignParentLeft="false"
-                android:layout_alignParentTop="false"
-                android:layout_below="@+id/meLabel"
-                android:layout_marginBottom="20dp"
-                android:layout_marginTop="10dp"
-                android:divider="@null"
-                android:listSelector="@android:color/transparent"
+        <ListView
+            android:id="@+id/messagesContainer"
+            android:layout_width="match_parent"
+            android:layout_height="match_parent"
+            android:layout_above="@+id/messageEdit"
+            android:layout_alignParentLeft="false"
+            android:layout_alignParentTop="false"
+            android:layout_below="@+id/meLabel"
+            android:layout_marginBottom="20dp"
+            android:layout_marginTop="10dp"
+            android:divider="@null"
+            android:listSelector="@android:color/transparent"
-                android:transcriptMode="alwaysScroll"/>
+            android:transcriptMode="alwaysScroll" />
 
-            <TextView
-                android:id="@+id/meLabel"
-                android:layout_width="wrap_content"
-                android:layout_height="wrap_content"
-                android:layout_gravity="left|center_vertical"
-                android:singleLine="false"
-                android:text="Me"
+        <TextView
+            android:id="@+id/meLabel"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_gravity="left|center_vertical"
+            android:singleLine="false"
+            android:text="Me"
-                android:textSize="20dp"/>
+            android:textSize="20dp" />
 
-            <TextView
-                android:id="@+id/companionLabel"
-                android:layout_width="wrap_content"
-                android:layout_height="wrap_content"
-                android:layout_alignParentRight="true"
-                android:text="Friend"
+        <TextView
+            android:id="@+id/companionLabel"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_alignParentRight="true"
+            android:text="Friend"
-                android:textSize="20dp"/>
+            android:textSize="20dp" />
 
-            <ProgressBar
-                android:id="@+id/progressBar"
-                style="?android:attr/progressBarStyleLarge"
-                android:layout_width="wrap_content"
-                android:layout_height="wrap_content"
-                android:layout_centerHorizontal="true"
+        <ProgressBar
+            android:id="@+id/progressBar"
+            style="?android:attr/progressBarStyleLarge"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_centerHorizontal="true"
-                android:layout_centerVertical="true"/>
+            android:layout_centerVertical="true" />
 
+
-        </RelativeLayout>
+    </RelativeLayout>
 
-        <FrameLayout
-            android:id="@+id/frame"
-            android:layout_width="match_parent"
-            android:layout_height="240dp"
+    <FrameLayout
+        android:id="@+id/frame"
+        android:layout_width="match_parent"
+        android:layout_height="240dp"
-            android:layout_alignParentBottom="true"/>
+        android:layout_alignParentBottom="true" />
-    </vc908.stickerfactory.ui.view.KeyboardHandleRelativeLayout>
 </LinearLayout>
\ No newline at end of file
Index: app/src/main/java/com/creative/chatapp4/ui/activities/SplashActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.creative.chatapp4.ui.activities;\n\nimport android.app.Activity;\nimport android.app.AlertDialog;\nimport android.content.Intent;\nimport android.os.Bundle;\n\nimport com.creative.chatapp4.ApplicationSingleton;\nimport com.creative.chatapp4.R;\nimport com.creative.chatapp4.core.ChatService;\nimport com.quickblox.core.QBEntityCallback;\nimport com.quickblox.core.exception.QBResponseException;\nimport com.quickblox.users.model.QBUser;\n\n\npublic class SplashActivity extends Activity {\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_splash);\n\n        // Login to REST API\n        //\n        final QBUser user = new QBUser();\n        user.setLogin(ApplicationSingleton.USER_LOGIN);\n        user.setPassword(ApplicationSingleton.USER_PASSWORD);\n\n\n        ChatService.getInstance().login(user, new QBEntityCallback<Void>() {\n\n            @Override\n            public void onSuccess(Void result, Bundle bundle) {\n                // Go to Dialogs screen\n                //\n                Intent intent = new Intent(SplashActivity.this, DialogsActivity.class);\n                startActivity(intent);\n                finish();\n            }\n\n            @Override\n            public void onError(QBResponseException errors) {\n                AlertDialog.Builder dialog = new AlertDialog.Builder(SplashActivity.this);\n                dialog.setMessage(\"chat login errors: \" + errors).create().show();\n            }\n        });\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>windows-1252
===================================================================
--- app/src/main/java/com/creative/chatapp4/ui/activities/SplashActivity.java	(revision b58cfdf0a245501220cfda568c583a8cdd2888a5)
+++ app/src/main/java/com/creative/chatapp4/ui/activities/SplashActivity.java	(revision )
@@ -27,6 +27,7 @@
         user.setPassword(ApplicationSingleton.USER_PASSWORD);
 
 
+        
         ChatService.getInstance().login(user, new QBEntityCallback<Void>() {
 
             @Override
\ No newline at end of file
Index: app/build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>apply plugin: 'com.android.application'\napply plugin: 'com.google.gms.google-services'\n\n\nrepositories {\n    mavenCentral()\n    maven { url 'http://maven.stickerpipe.com/artifactory/stickerfactory' }\n}\n\nandroid {\n    compileSdkVersion 23\n    buildToolsVersion \"23.0.2\"\n\n    dexOptions {\n        javaMaxHeapSize \"4g\"\n    }\n    defaultConfig {\n        applicationId \"com.creative.chatapp4\"\n        minSdkVersion 16\n        targetSdkVersion 23\n        versionCode 1\n        versionName \"1.0\"\n\n        multiDexEnabled true\n    }\n    buildTypes {\n        release {\n            minifyEnabled false\n            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'\n        }\n    }\n}\n\ndependencies {\n    compile 'com.android.support:multidex:1.0.1'\n    compile fileTree(dir: 'libs', include: ['*.jar'])\n    testCompile 'junit:junit:4.12'\n    compile 'com.android.support:appcompat-v7:23.1.1'\n    compile 'com.android.support:design:23.1.1'\n    // online dependencies, from maven repository, jar files\n    //\n    compile \"com.quickblox:quickblox-android-sdk-core:$rootProject.qbSdkVersion@aar\"\n    compile(\"com.quickblox:quickblox-android-sdk-chat:$rootProject.qbSdkVersion@aar\") {\n        transitive = true\n    }\n    compile \"com.quickblox:quickblox-android-sdk-messages:$rootProject.qbSdkVersion@aar\"\n\n    compile 'com.navercorp.pulltorefresh:library:3.2.3@aar'\n    compile('vc908.stickers:stickerfactory:0.2.2@aar') {\n        transitive = true;\n    }\n    compile 'com.google.android.gms:play-services:8.3.0'\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/build.gradle	(revision b58cfdf0a245501220cfda568c583a8cdd2888a5)
+++ app/build.gradle	(revision )
@@ -4,6 +4,9 @@
 
 repositories {
     mavenCentral()
+    maven {
+        url 'https://github.com/rockerhieu/mvn-repo/raw/master/'
+    }
     maven { url 'http://maven.stickerpipe.com/artifactory/stickerfactory' }
 }
 
@@ -46,6 +49,7 @@
     compile "com.quickblox:quickblox-android-sdk-messages:$rootProject.qbSdkVersion@aar"
 
     compile 'com.navercorp.pulltorefresh:library:3.2.3@aar'
+    compile 'com.rockerhieu.emojicon:library:1.3.3'
     compile('vc908.stickers:stickerfactory:0.2.2@aar') {
         transitive = true;
     }
Index: app/src/main/java/com/creative/chatapp4/ui/adapters/ChatAdapter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.creative.chatapp4.ui.adapters;\n\nimport android.app.Activity;\nimport android.content.Context;\nimport android.view.Gravity;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.widget.BaseAdapter;\nimport android.widget.ImageView;\nimport android.widget.LinearLayout;\nimport android.widget.RelativeLayout;\nimport android.widget.TextView;\n\nimport com.creative.chatapp4.R;\nimport com.creative.chatapp4.core.ChatService;\nimport com.creative.chatapp4.utils.TimeUtils;\nimport com.quickblox.chat.model.QBChatMessage;\nimport com.quickblox.users.model.QBUser;\n\nimport java.util.List;\n\nimport vc908.stickerfactory.StickersManager;\n\npublic class ChatAdapter extends BaseAdapter {\n\n    private final List<QBChatMessage> chatMessages;\n    private Activity context;\n\n    private enum ChatItemType {\n        Message,\n        Sticker\n    }\n\n    public ChatAdapter(Activity context, List<QBChatMessage> chatMessages) {\n        this.context = context;\n        this.chatMessages = chatMessages;\n    }\n\n    @Override\n    public int getCount() {\n        if (chatMessages != null) {\n            return chatMessages.size();\n        } else {\n            return 0;\n        }\n    }\n\n    @Override\n    public QBChatMessage getItem(int position) {\n        if (chatMessages != null) {\n            return chatMessages.get(position);\n        } else {\n            return null;\n        }\n    }\n\n    @Override\n    public int getViewTypeCount() {\n        return ChatItemType.values().length;\n    }\n\n    @Override\n    public int getItemViewType(int position) {\n        return StickersManager.isSticker(getItem(position).getBody())\n                ? ChatItemType.Sticker.ordinal()\n                : ChatItemType.Message.ordinal();\n    }\n\n    @Override\n    public long getItemId(int position) {\n        return position;\n    }\n\n    @Override\n    public View getView(int position, View convertView, ViewGroup parent) {\n        ViewHolder holder;\n        QBChatMessage chatMessage = getItem(position);\n        LayoutInflater vi = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);\n\n        if (convertView == null) {\n            if (getItemViewType(position) == ChatItemType.Sticker.ordinal()) {\n                convertView = vi.inflate(R.layout.list_item_sticker, parent, false);\n            } else {\n                convertView = vi.inflate(R.layout.list_item_message, parent, false);\n            }\n            holder = createViewHolder(convertView);\n            convertView.setTag(holder);\n        } else {\n            holder = (ViewHolder) convertView.getTag();\n        }\n\n        QBUser currentUser = ChatService.getInstance().getCurrentUser();\n        boolean isOutgoing = chatMessage.getSenderId() == null || chatMessage.getSenderId().equals(currentUser.getId());\n        setAlignment(holder, isOutgoing);\n        if (StickersManager.isSticker(chatMessage.getBody())) {\n            StickersManager.with(convertView.getContext())\n                    .loadSticker(chatMessage.getBody())\n                    .setPlaceholderColorFilterRes(android.R.color.darker_gray)\n                    .into(holder.stickerView);\n        } else if (holder.txtMessage != null) {\n            holder.txtMessage.setText(chatMessage.getBody());\n        }\n        if (chatMessage.getSenderId() != null) {\n            holder.txtInfo.setText(chatMessage.getSenderId() + \": \" + getTimeText(chatMessage));\n        } else {\n            holder.txtInfo.setText(getTimeText(chatMessage));\n        }\n        return convertView;\n    }\n\n    public void add(QBChatMessage message) {\n        chatMessages.add(message);\n    }\n\n    public void add(List<QBChatMessage> messages) {\n        chatMessages.addAll(messages);\n    }\n\n    private void setAlignment(ViewHolder holder, boolean isOutgoing) {\n        if (!isOutgoing) {\n            LinearLayout.LayoutParams layoutParams = (LinearLayout.LayoutParams) holder.contentWithBG.getLayoutParams();\n            layoutParams.gravity = Gravity.RIGHT;\n            holder.contentWithBG.setLayoutParams(layoutParams);\n\n            RelativeLayout.LayoutParams lp = (RelativeLayout.LayoutParams) holder.content.getLayoutParams();\n            lp.addRule(RelativeLayout.ALIGN_PARENT_LEFT, 0);\n            lp.addRule(RelativeLayout.ALIGN_PARENT_RIGHT);\n            holder.content.setLayoutParams(lp);\n\n            layoutParams = (LinearLayout.LayoutParams) holder.txtInfo.getLayoutParams();\n            layoutParams.gravity = Gravity.RIGHT;\n            holder.txtInfo.setLayoutParams(layoutParams);\n            if (holder.txtMessage != null) {\n                holder.contentWithBG.setBackgroundResource(R.drawable.incoming_message_bg);\n                layoutParams = (LinearLayout.LayoutParams) holder.txtMessage.getLayoutParams();\n                layoutParams.gravity = Gravity.RIGHT;\n                holder.txtMessage.setLayoutParams(layoutParams);\n            } else {\n                holder.contentWithBG.setBackgroundResource(android.R.color.transparent);\n            }\n        } else {\n            LinearLayout.LayoutParams layoutParams = (LinearLayout.LayoutParams) holder.contentWithBG.getLayoutParams();\n            layoutParams.gravity = Gravity.LEFT;\n            holder.contentWithBG.setLayoutParams(layoutParams);\n\n            RelativeLayout.LayoutParams lp = (RelativeLayout.LayoutParams) holder.content.getLayoutParams();\n            lp.addRule(RelativeLayout.ALIGN_PARENT_RIGHT, 0);\n            lp.addRule(RelativeLayout.ALIGN_PARENT_LEFT);\n            holder.content.setLayoutParams(lp);\n\n            layoutParams = (LinearLayout.LayoutParams) holder.txtInfo.getLayoutParams();\n            layoutParams.gravity = Gravity.LEFT;\n            holder.txtInfo.setLayoutParams(layoutParams);\n\n            if (holder.txtMessage != null) {\n                holder.contentWithBG.setBackgroundResource(R.drawable.outgoing_message_bg);\n                layoutParams = (LinearLayout.LayoutParams) holder.txtMessage.getLayoutParams();\n                layoutParams.gravity = Gravity.LEFT;\n                holder.txtMessage.setLayoutParams(layoutParams);\n            } else {\n                holder.contentWithBG.setBackgroundResource(android.R.color.transparent);\n            }\n        }\n    }\n\n    private ViewHolder createViewHolder(View v) {\n        ViewHolder holder = new ViewHolder();\n        holder.txtMessage = (TextView) v.findViewById(R.id.txtMessage);\n        holder.content = (LinearLayout) v.findViewById(R.id.content);\n        holder.contentWithBG = (LinearLayout) v.findViewById(R.id.contentWithBackground);\n        holder.txtInfo = (TextView) v.findViewById(R.id.txtInfo);\n        holder.stickerView = (ImageView) v.findViewById(R.id.sticker_image);\n        return holder;\n    }\n\n    private String getTimeText(QBChatMessage message) {\n        return TimeUtils.millisToLongDHMS(message.getDateSent() * 1000);\n    }\n\n    private static class ViewHolder {\n        public TextView txtMessage;\n        public TextView txtInfo;\n        public LinearLayout content;\n        public LinearLayout contentWithBG;\n        public ImageView stickerView;\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>windows-1252
===================================================================
--- app/src/main/java/com/creative/chatapp4/ui/adapters/ChatAdapter.java	(revision b58cfdf0a245501220cfda568c583a8cdd2888a5)
+++ app/src/main/java/com/creative/chatapp4/ui/adapters/ChatAdapter.java	(revision )
@@ -20,8 +20,6 @@
 
 import java.util.List;
 
-import vc908.stickerfactory.StickersManager;
-
 public class ChatAdapter extends BaseAdapter {
 
     private final List<QBChatMessage> chatMessages;
@@ -62,9 +60,7 @@
 
     @Override
     public int getItemViewType(int position) {
-        return StickersManager.isSticker(getItem(position).getBody())
-                ? ChatItemType.Sticker.ordinal()
-                : ChatItemType.Message.ordinal();
+        return ChatItemType.Message.ordinal();
     }
 
     @Override
@@ -93,12 +89,7 @@
         QBUser currentUser = ChatService.getInstance().getCurrentUser();
         boolean isOutgoing = chatMessage.getSenderId() == null || chatMessage.getSenderId().equals(currentUser.getId());
         setAlignment(holder, isOutgoing);
-        if (StickersManager.isSticker(chatMessage.getBody())) {
-            StickersManager.with(convertView.getContext())
-                    .loadSticker(chatMessage.getBody())
-                    .setPlaceholderColorFilterRes(android.R.color.darker_gray)
-                    .into(holder.stickerView);
-        } else if (holder.txtMessage != null) {
+        if (holder.txtMessage != null) {
             holder.txtMessage.setText(chatMessage.getBody());
         }
         if (chatMessage.getSenderId() != null) {
Index: app/src/main/java/com/creative/chatapp4/ApplicationSingleton.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.creative.chatapp4;\n\nimport android.app.Application;\nimport android.content.Context;\nimport android.content.pm.PackageInfo;\nimport android.content.pm.PackageManager;\nimport android.support.multidex.MultiDex;\nimport android.util.Log;\n\nimport com.quickblox.core.QBSettings;\n\nimport vc908.stickerfactory.StickersManager;\n\npublic class ApplicationSingleton extends Application {\n    private static final String TAG = ApplicationSingleton.class.getSimpleName();\n\n    public static final String APP_ID = \"36665\";\n    public static final String AUTH_KEY = \"Rp5OMRbOYZGKa5s\";\n    public static final String AUTH_SECRET = \"gsVK9k9tk5RT9S5\";\n    public static final String ACCOUNT_KEY = \"nhZ7xismqpK1aFDjxxfS\";\n\n    public static final String STICKER_API_KEY = \"847b82c49db21ecec88c510e377b452c\";\n\n    public static final String USER_LOGIN = \"dalwadi21\";\n    public static final String USER_PASSWORD = \"harsh007\";\n\n    private static ApplicationSingleton instance;\n\n    public static ApplicationSingleton getInstance() {\n        return instance;\n    }\n\n    @Override\n    public void onCreate() {\n        super.onCreate();\n\n        Log.d(TAG, \"onCreate\");\n\n        instance = this;\n\n        // Initialise QuickBlox SDK\n        //\n        QBSettings.getInstance().init(getApplicationContext(), APP_ID, AUTH_KEY, AUTH_SECRET);\n        QBSettings.getInstance().setAccountKey(ACCOUNT_KEY);\n\n\n        // Initialise Stickers sdk\n        //\n        StickersManager.initialize(STICKER_API_KEY, this);\n    }\n\n    protected void attachBaseContext(Context base) {\n        super.attachBaseContext(base);\n        MultiDex.install(this);\n    }\n\n    public int getAppVersion() {\n        try {\n            PackageInfo packageInfo = getPackageManager().getPackageInfo(getPackageName(), 0);\n            return packageInfo.versionCode;\n        } catch (PackageManager.NameNotFoundException e) {\n            // should never happen\n            throw new RuntimeException(\"Could not get package name: \" + e);\n        }\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>windows-1252
===================================================================
--- app/src/main/java/com/creative/chatapp4/ApplicationSingleton.java	(revision b58cfdf0a245501220cfda568c583a8cdd2888a5)
+++ app/src/main/java/com/creative/chatapp4/ApplicationSingleton.java	(revision )
@@ -9,7 +9,6 @@
 
 import com.quickblox.core.QBSettings;
 
-import vc908.stickerfactory.StickersManager;
 
 public class ApplicationSingleton extends Application {
     private static final String TAG = ApplicationSingleton.class.getSimpleName();
@@ -46,7 +45,7 @@
 
         // Initialise Stickers sdk
         //
-        StickersManager.initialize(STICKER_API_KEY, this);
+
     }
 
     protected void attachBaseContext(Context base) {
Index: app/src/main/java/com/creative/chatapp4/ui/adapters/DialogsAdapter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.creative.chatapp4.ui.adapters;\n\n/**\n * Created by igorkhomenko on 9/12/14.\n */\n\nimport android.app.Activity;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.widget.BaseAdapter;\nimport android.widget.TextView;\n\nimport com.creative.chatapp4.R;\nimport com.creative.chatapp4.core.ChatService;\nimport com.quickblox.chat.model.QBDialog;\nimport com.quickblox.chat.model.QBDialogType;\nimport com.quickblox.users.model.QBUser;\n\nimport java.util.List;\n\nimport vc908.stickerfactory.StickersManager;\n\npublic class DialogsAdapter extends BaseAdapter {\n    private List<QBDialog> dataSource;\n    private LayoutInflater inflater;\n\n    public DialogsAdapter(List<QBDialog> dataSource, Activity ctx) {\n        this.dataSource = dataSource;\n        this.inflater = LayoutInflater.from(ctx);\n    }\n\n    public List<QBDialog> getDataSource() {\n        return dataSource;\n    }\n\n    @Override\n    public long getItemId(int position) {\n        return position;\n    }\n\n    @Override\n    public Object getItem(int position) {\n        return dataSource.get(position);\n    }\n\n    @Override\n    public int getCount() {\n        return dataSource.size();\n    }\n\n    @Override\n    public View getView(int position, View convertView, ViewGroup parent) {\n        ViewHolder holder;\n\n        // initIfNeed view\n        //\n        if (convertView == null) {\n            convertView = inflater.inflate(R.layout.list_item_room, null);\n            holder = new ViewHolder();\n            holder.name = (TextView)convertView.findViewById(R.id.roomName);\n            holder.lastMessage = (TextView)convertView.findViewById(R.id.lastMessage);\n            holder.groupType = (TextView)convertView.findViewById(R.id.textViewGroupType);\n            convertView.setTag(holder);\n        } else {\n            holder = (ViewHolder) convertView.getTag();\n        }\n\n        // set data\n        //\n        QBDialog dialog = dataSource.get(position);\n        if(dialog.getType().equals(QBDialogType.GROUP)){\n            holder.name.setText(dialog.getName());\n        }else{\n            // get opponent name for private dialog\n            //\n            Integer opponentID = ChatService.getInstance().getOpponentIDForPrivateDialog(dialog);\n            QBUser user = ChatService.getInstance().getDialogsUsers().get(opponentID);\n            if(user != null){\n                holder.name.setText(user.getLogin() == null ? user.getFullName() : user.getLogin());\n            }\n        }\n        if (dialog.getLastMessage() != null && StickersManager.isSticker(dialog.getLastMessage())) {\n            holder.lastMessage.setText(\"Sticker\");\n        } else {\n            holder.lastMessage.setText(dialog.getLastMessage());\n        }\n        holder.groupType.setText(dialog.getType().toString());\n\n        return convertView;\n    }\n\n    private static class ViewHolder{\n        TextView name;\n        TextView lastMessage;\n        TextView groupType;\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>windows-1252
===================================================================
--- app/src/main/java/com/creative/chatapp4/ui/adapters/DialogsAdapter.java	(revision b58cfdf0a245501220cfda568c583a8cdd2888a5)
+++ app/src/main/java/com/creative/chatapp4/ui/adapters/DialogsAdapter.java	(revision )
@@ -19,7 +19,6 @@
 
 import java.util.List;
 
-import vc908.stickerfactory.StickersManager;
 
 public class DialogsAdapter extends BaseAdapter {
     private List<QBDialog> dataSource;
@@ -80,7 +79,7 @@
                 holder.name.setText(user.getLogin() == null ? user.getFullName() : user.getLogin());
             }
         }
-        if (dialog.getLastMessage() != null && StickersManager.isSticker(dialog.getLastMessage())) {
+        if (dialog.getLastMessage() != null ) {
             holder.lastMessage.setText("Sticker");
         } else {
             holder.lastMessage.setText(dialog.getLastMessage());
Index: .idea/encodings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"Encoding\">\n    <file url=\"file://$PROJECT_DIR$/app/src/main/java/com/creative/chatapp4/ApplicationSingleton.java\" charset=\"windows-1252\" />\n    <file url=\"file://$PROJECT_DIR$/app/src/main/java/com/creative/chatapp4/core\" charset=\"windows-1252\" />\n    <file url=\"file://$PROJECT_DIR$/app/src/main/java/com/creative/chatapp4/pushnotifications\" charset=\"windows-1252\" />\n    <file url=\"file://$PROJECT_DIR$/app/src/main/java/com/creative/chatapp4/ui\" charset=\"windows-1252\" />\n    <file url=\"file://$PROJECT_DIR$/app/src/main/java/com/creative/chatapp4/utils\" charset=\"windows-1252\" />\n    <file url=\"file://$PROJECT_DIR$/app/src/main/res/drawable/app_icon.png\" charset=\"windows-1252\" />\n    <file url=\"file://$PROJECT_DIR$/app/src/main/res/drawable/app_logo.png\" charset=\"windows-1252\" />\n    <file url=\"file://$PROJECT_DIR$/app/src/main/res/drawable/ic_action_insert_emoticon.png\" charset=\"windows-1252\" />\n    <file url=\"file://$PROJECT_DIR$/app/src/main/res/drawable/ic_action_insert_emoticon.png\" charset=\"windows-1252\" />\n    <file url=\"file://$PROJECT_DIR$/app/src/main/res/drawable/ic_action_keyboard.png\" charset=\"windows-1252\" />\n    <file url=\"file://$PROJECT_DIR$/app/src/main/res/drawable/ic_action_keyboard.png\" charset=\"windows-1252\" />\n    <file url=\"file://$PROJECT_DIR$/app/src/main/res/drawable/ic_action_new.png\" charset=\"windows-1252\" />\n    <file url=\"file://$PROJECT_DIR$/app/src/main/res/drawable/ic_launcher.png\" charset=\"windows-1252\" />\n    <file url=\"file://$PROJECT_DIR$/app/src/main/res/drawable/ic_room.png\" charset=\"windows-1252\" />\n    <file url=\"file://$PROJECT_DIR$/app/src/main/res/drawable/ic_user.png\" charset=\"windows-1252\" />\n    <file url=\"file://$PROJECT_DIR$/app/src/main/res/drawable/incoming_message_bg.9.png\" charset=\"windows-1252\" />\n    <file url=\"file://$PROJECT_DIR$/app/src/main/res/drawable/outgoing_message_bg.9.png\" charset=\"windows-1252\" />\n    <file url=\"file://$PROJECT_DIR$/app/src/main/res/drawable/qb_splash_bg.png\" charset=\"windows-1252\" />\n    <file url=\"file://$PROJECT_DIR$/app/src/main/res/drawable/qb_splash_hero.png\" charset=\"windows-1252\" />\n    <file url=\"file://$PROJECT_DIR$/app/src/main/res/drawable/qb_splash_link.png\" charset=\"windows-1252\" />\n    <file url=\"file://$PROJECT_DIR$/app/src/main/res/layout/activity_chat.xml\" charset=\"windows-1252\" />\n    <file url=\"file://$PROJECT_DIR$/app/src/main/res/layout/activity_login.xml\" charset=\"windows-1252\" />\n    <file url=\"file://$PROJECT_DIR$/app/src/main/res/layout/activity_splash.xml\" charset=\"windows-1252\" />\n    <file url=\"file://$PROJECT_DIR$/app/src/main/res/layout/dialog_new.xml\" charset=\"windows-1252\" />\n    <file url=\"file://$PROJECT_DIR$/app/src/main/res/layout/dialogs_activity.xml\" charset=\"windows-1252\" />\n    <file url=\"file://$PROJECT_DIR$/app/src/main/res/layout/list_item_message.xml\" charset=\"windows-1252\" />\n    <file url=\"file://$PROJECT_DIR$/app/src/main/res/layout/list_item_room.xml\" charset=\"windows-1252\" />\n    <file url=\"file://$PROJECT_DIR$/app/src/main/res/layout/list_item_sticker.xml\" charset=\"windows-1252\" />\n    <file url=\"file://$PROJECT_DIR$/app/src/main/res/layout/list_item_user.xml\" charset=\"windows-1252\" />\n    <file url=\"file://$PROJECT_DIR$/app/src/main/res/menu/rooms.xml\" charset=\"windows-1252\" />\n    <file url=\"file://$PROJECT_DIR$/app/src/main/res/mipmap-hdpi/ic_action_insert_emoticon.png\" charset=\"windows-1252\" />\n    <file url=\"file://$PROJECT_DIR$/app/src/main/res/mipmap-hdpi/ic_action_keyboard.png\" charset=\"windows-1252\" />\n    <file url=\"file://$PROJECT_DIR$/app/src/main/res/mipmap-mdpi/ic_action_insert_emoticon.png\" charset=\"windows-1252\" />\n    <file url=\"file://$PROJECT_DIR$/app/src/main/res/mipmap-mdpi/ic_action_keyboard.png\" charset=\"windows-1252\" />\n    <file url=\"file://$PROJECT_DIR$/app/src/main/res/mipmap-xhdpi/ic_action_insert_emoticon.png\" charset=\"windows-1252\" />\n    <file url=\"file://$PROJECT_DIR$/app/src/main/res/mipmap-xhdpi/ic_action_keyboard.png\" charset=\"windows-1252\" />\n    <file url=\"file://$PROJECT_DIR$/app/src/main/res/mipmap-xxhdpi/ic_action_insert_emoticon.png\" charset=\"windows-1252\" />\n    <file url=\"file://$PROJECT_DIR$/app/src/main/res/mipmap-xxhdpi/ic_action_keyboard.png\" charset=\"windows-1252\" />\n    <file url=\"file://$PROJECT_DIR$/app/src/main/res/mipmap-xxxhdpi/ic_action_insert_emoticon.png\" charset=\"windows-1252\" />\n    <file url=\"file://$PROJECT_DIR$/app/src/main/res/mipmap-xxxhdpi/ic_action_keyboard.png\" charset=\"windows-1252\" />\n    <file url=\"PROJECT\" charset=\"UTF-8\" />\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/encodings.xml	(revision b58cfdf0a245501220cfda568c583a8cdd2888a5)
+++ .idea/encodings.xml	(revision )
@@ -8,10 +8,6 @@
     <file url="file://$PROJECT_DIR$/app/src/main/java/com/creative/chatapp4/utils" charset="windows-1252" />
     <file url="file://$PROJECT_DIR$/app/src/main/res/drawable/app_icon.png" charset="windows-1252" />
     <file url="file://$PROJECT_DIR$/app/src/main/res/drawable/app_logo.png" charset="windows-1252" />
-    <file url="file://$PROJECT_DIR$/app/src/main/res/drawable/ic_action_insert_emoticon.png" charset="windows-1252" />
-    <file url="file://$PROJECT_DIR$/app/src/main/res/drawable/ic_action_insert_emoticon.png" charset="windows-1252" />
-    <file url="file://$PROJECT_DIR$/app/src/main/res/drawable/ic_action_keyboard.png" charset="windows-1252" />
-    <file url="file://$PROJECT_DIR$/app/src/main/res/drawable/ic_action_keyboard.png" charset="windows-1252" />
     <file url="file://$PROJECT_DIR$/app/src/main/res/drawable/ic_action_new.png" charset="windows-1252" />
     <file url="file://$PROJECT_DIR$/app/src/main/res/drawable/ic_launcher.png" charset="windows-1252" />
     <file url="file://$PROJECT_DIR$/app/src/main/res/drawable/ic_room.png" charset="windows-1252" />
\ No newline at end of file
Index: app/src/main/res/layout/list_item_message.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\">\n\n    <LinearLayout\n        android:id=\"@+id/content\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_alignParentRight=\"true\"\n        android:orientation=\"vertical\">\n\n        <TextView\n            android:id=\"@+id/txtInfo\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"20sp\"\n            android:layout_gravity=\"right\"\n            android:textSize=\"10sp\"\n            android:textColor=\"@android:color/secondary_text_dark\" />\n\n        <LinearLayout\n            android:id=\"@+id/contentWithBackground\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:layout_gravity=\"right\"\n            android:background=\"@drawable/incoming_message_bg\"\n            android:paddingLeft=\"10dp\"\n            android:paddingBottom=\"10dp\"\n            android:orientation=\"vertical\">\n\n            <TextView\n                android:id=\"@+id/txtMessage\"\n                android:layout_width=\"wrap_content\"\n                android:layout_height=\"wrap_content\"\n                android:textColor=\"@android:color/black\"\n                android:maxWidth=\"250dp\" />\n\n        </LinearLayout>\n\n    </LinearLayout>\n</RelativeLayout>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/list_item_message.xml	(revision b58cfdf0a245501220cfda568c583a8cdd2888a5)
+++ app/src/main/res/layout/list_item_message.xml	(revision )
@@ -2,7 +2,8 @@
 
 <RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
     android:layout_width="wrap_content"
-    android:layout_height="wrap_content">
+    android:layout_height="wrap_content"
+    xmlns:emojicon="http://schemas.android.com/apk/res-auto">
 
     <LinearLayout
         android:id="@+id/content"
@@ -29,7 +30,8 @@
             android:paddingBottom="10dp"
             android:orientation="vertical">
 
-            <TextView
+            <com.rockerhieu.emojicon.EmojiconTextView
+                emojicon:emojiconAlignment="baseline"
                 android:id="@+id/txtMessage"
                 android:layout_width="wrap_content"
                 android:layout_height="wrap_content"
\ No newline at end of file
Index: app/src/main/java/com/creative/chatapp4/pushnotifications/Consts.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.creative.chatapp4.pushnotifications;\n\n/**\n * Created by igorkhomenko on 4/28/15.\n */\npublic class Consts {\n    // In GCM, the Sender ID is a project ID that you acquire from the API console\n    public static final String PROJECT_NUMBER = \"761750217637\";\n\n    public static final String EXTRA_MESSAGE = \"message\";\n\n    public static final String GCM_NOTIFICATION = \"GCM Notification\";\n    public static final String GCM_DELETED_MESSAGE = \"Deleted messages on server: \";\n    public static final String GCM_INTENT_SERVICE = \"GcmIntentService\";\n    public static final String GCM_SEND_ERROR = \"Send error: \";\n    public static final String GCM_RECEIVED = \"Received: \";\n\n    public static final String NEW_PUSH_EVENT = \"new-push-event\";\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>windows-1252
===================================================================
--- app/src/main/java/com/creative/chatapp4/pushnotifications/Consts.java	(revision b58cfdf0a245501220cfda568c583a8cdd2888a5)
+++ app/src/main/java/com/creative/chatapp4/pushnotifications/Consts.java	(revision )
@@ -5,7 +5,7 @@
  */
 public class Consts {
     // In GCM, the Sender ID is a project ID that you acquire from the API console
-    public static final String PROJECT_NUMBER = "761750217637";
+    public static final String PROJECT_NUMBER = "1024990644353";
 
     public static final String EXTRA_MESSAGE = "message";
 
Index: app/src/main/java/com/creative/chatapp4/ui/activities/BaseActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.creative.chatapp4.ui.activities;\n\nimport android.app.ProgressDialog;\nimport android.os.Bundle;\nimport android.os.Handler;\nimport android.support.v7.app.AppCompatActivity;\nimport android.util.Log;\nimport android.widget.Toast;\n\nimport com.creative.chatapp4.core.ApplicationSessionStateCallback;\nimport com.creative.chatapp4.core.ChatService;\nimport com.quickblox.core.QBEntityCallback;\nimport com.quickblox.core.exception.QBResponseException;\nimport com.quickblox.users.model.QBUser;\n\n/**\n * Created by igorkhomenko on 4/29/15.\n */\npublic class BaseActivity extends AppCompatActivity implements ApplicationSessionStateCallback {\n    private static final String TAG = BaseActivity.class.getSimpleName();\n\n    private static final String USER_LOGIN_KEY = \"USER_LOGIN_KEY\";\n    private static final String USER_PASSWORD_KEY = \"USER_PASSWORD_KEY\";\n\n    private boolean sessionActive = false;\n    private boolean needToRecreateSession = false;\n\n    private ProgressDialog progressDialog;\n    private final Handler handler = new Handler();\n\n    public boolean isSessionActive() {\n        return sessionActive;\n    }\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        // 'initialised' will be true if it's the 1st start of the app or if the app's process was killed by OS(or user)\n        //\n        if(savedInstanceState != null){\n            needToRecreateSession = true;\n        }else{\n            sessionActive = true;\n        }\n    }\n\n    @Override\n    public void onRestoreInstanceState(Bundle savedInstanceState) {\n        super.onRestoreInstanceState(savedInstanceState);\n\n        if(needToRecreateSession){\n            needToRecreateSession = false;\n\n            Log.d(TAG, \"Need to restore chat connection\");\n\n            QBUser user = new QBUser();\n            user.setLogin(savedInstanceState.getString(USER_LOGIN_KEY));\n            user.setPassword(savedInstanceState.getString(USER_PASSWORD_KEY));\n\n            savedInstanceState.remove(USER_LOGIN_KEY);\n            savedInstanceState.remove(USER_PASSWORD_KEY);\n\n            recreateSession(user);\n        }\n    }\n\n    private void recreateSession(final QBUser user){\n        sessionActive = false;\n        this.onStartSessionRecreation();\n\n        showProgressDialog();\n\n        // Restoring Chat session\n        //\n        ChatService.getInstance().login(user, new QBEntityCallback<Void>() {\n            @Override\n            public void onSuccess(Void result, Bundle bundle) {\n                Log.d(TAG, \"Chat login onSuccess\");\n\n                progressDialog.dismiss();\n                progressDialog = null;\n\n                sessionActive = true;\n                BaseActivity.this.onFinishSessionRecreation(true);\n            }\n\n            @Override\n            public void onError(QBResponseException errors) {\n\n                Log.d(TAG, \"Chat login onError: \" + errors);\n\n                Toast toast = Toast.makeText(getApplicationContext(),\n                        \"Error in the recreate session request, trying again in 3 seconds.. Check you internet connection.\", Toast.LENGTH_SHORT);\n                toast.show();\n\n                // try again\n                handler.postDelayed(new Runnable() {\n                    @Override\n                    public void run() {\n                        recreateSession(user);\n                    }\n                }, 3000);\n\n                BaseActivity.this.onFinishSessionRecreation(false);\n            }\n        });\n    }\n\n    @Override\n    protected void onSaveInstanceState(Bundle outState) {\n        QBUser currentUser = ChatService.getInstance().getCurrentUser();\n        if(currentUser != null) {\n            outState.putString(USER_LOGIN_KEY, currentUser.getLogin());\n            outState.putString(USER_PASSWORD_KEY, currentUser.getPassword());\n        }\n\n        // Always call the superclass so it can save the view hierarchy state\n        super.onSaveInstanceState(outState);\n    }\n\n    private void showProgressDialog(){\n        if(progressDialog == null) {\n            progressDialog = new ProgressDialog(BaseActivity.this);\n            progressDialog.setTitle(\"Loading\");\n            progressDialog.setMessage(\"Restoring chat session...\");\n            progressDialog.setProgressStyle(progressDialog.STYLE_SPINNER);\n        }\n        progressDialog.show();\n    }\n\n\n    //\n    // ApplicationSessionStateCallback\n    //\n\n    @Override\n    public void onStartSessionRecreation() {\n    }\n\n    @Override\n    public void onFinishSessionRecreation(boolean success) {\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>windows-1252
===================================================================
--- app/src/main/java/com/creative/chatapp4/ui/activities/BaseActivity.java	(revision b58cfdf0a245501220cfda568c583a8cdd2888a5)
+++ app/src/main/java/com/creative/chatapp4/ui/activities/BaseActivity.java	(revision )
@@ -3,7 +3,7 @@
 import android.app.ProgressDialog;
 import android.os.Bundle;
 import android.os.Handler;
-import android.support.v7.app.AppCompatActivity;
+import android.support.v4.app.FragmentActivity;
 import android.util.Log;
 import android.widget.Toast;
 
@@ -16,7 +16,7 @@
 /**
  * Created by igorkhomenko on 4/29/15.
  */
-public class BaseActivity extends AppCompatActivity implements ApplicationSessionStateCallback {
+public class BaseActivity extends FragmentActivity implements ApplicationSessionStateCallback {
     private static final String TAG = BaseActivity.class.getSimpleName();
 
     private static final String USER_LOGIN_KEY = "USER_LOGIN_KEY";
